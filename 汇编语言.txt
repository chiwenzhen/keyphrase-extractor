汇编语言（Assembly Language）是面向机器的程序设计语言。在汇编语言中，用助记符（Memoni）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址，如此就增强了程序的可读性和编写难度，象这样符号化的程序设计语言就是汇编语言，因此亦称为符号语言。使用汇编语言编写的程序，机器不能直接识别，还要由汇编程序或者叫汇编语言编译器转换成机器指令。汇编程序将符号化的操作代码组装成处理器可以识别的机器指令，这个组装的过程称为组合或者汇编。因此，有时候人们也把汇编语言称为组合语言。
目录

简介
优缺点
应用
特点
经典教材
编译环境
x86处理器指令集
展开
编辑本段
简介

汇编语言是直接面向处理器（Processor）的程序设计语言。处理器是在指令的控制下工作的，处理器可以识别的每一条指令称为机器指令。每一种处理器都有自己可以识别的一整套指令，称为指令集。处理器执行指令时，根据不同的指令采取不同的动作，完成不同的功能，既可以改变自己内部的工作状态，也能控制其它外围电路的工作状态
如图所示，在电路中，每条机器指令都表现为一组电信号，通过一排导线进入处

  [1]
理器。这些电信号有的呈高电平，有的呈低电平，哪些为高，哪些为低，取决于不同的机器指令。如果把高电平记为“1”，低电平记为“0”，那么，不同的机器指令将表现为不同的二进制序列，由于它们的无规律性，这就使得机器指令难以理解、书写和记忆
人类最容易接受自己每天都使用的自然语言。为了使机器指令的书写和理解变得容易，需要借鉴自然语言的优点，为此就引入了汇编语言。汇编语言使用符号来代表不同的机器指令，而这些符号非常接近于自然语言的要素。基本上，汇编语言里的每一条指令，都对应着处理器的一条机器指令。
汇编语言包括两个部分：语法部分和编译器。语法部分提供与机器指令相对应的助记符，方便指令的书写和阅读。当然，汇编语言的符号可以被人类接受，但不能被处理器识别，为此，还要由汇编语言编译器将这些助记符转换成机器指令。
根据应用领域的不同，处理器的种类繁多，比如用于工业控制和嵌入式计算的Z80、MC68000和MCS-51、广泛应用于个人计算机的INTELx86系列，以及基于ARM体系结构的处理器，包括苹果公司在内的大企业都是ARM的客户。事实上，今天的ARM是最受欢迎的32位嵌入式处理器，而且，今天的ARM处理器比INTEL奔腾系列卖得还多，基本上是3：1的比例。
不同的处理器有不同的指令集。正是因为这个原因，每一种处理器都会有自己专属的汇编语言语法规则和编译器。即使是同一种类型的处理器，也可能拥有不同的汇编语言编译器。一个明显的例子是INTEL x86系列的处理器，围绕它就开发出好多种编译器来，如MASM、NASM、FASM、TASM和AT&T等。而且，这每一种编译器，都使用不同的语法。
编辑本段
优缺点

优点
1、因为用汇编语言设计的程序最终被转换成机器指令，故能够保持机器语言的一致性，直接、简捷，并能像机器指令一样访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等。使用汇编语言，可以访问所有能够被访问的软、硬件资源。
2、目标代码简短，占用内存少，执行速度快，是高效的程序设计语言，经常与高级语言配合使用，以改善程序的执行速度和效率，弥补高级语言在硬件控制方面的不足，应用十分广泛。
缺点
1、汇编语言是面向机器的，处于整个计算机语言层次结构的底层，故被视为一种低级语言，通常是为特定的计算机或系列计算机专门设计的。因此，不同的处理器有不同的汇编语言语法和编译器，编译的程序无法在不同的处理器上执行，缺乏可移植性；
2、难于从汇编语言代码上理解程序设计意图，可维护性差，即使是完成简单的工作也需要大量的汇编语言代码，很容易产生bug，难于调试；
3、使用汇编语言必须对某种处理器非常了解，而且只能针对特定的体系结构和处理器进行优化，开发效率很低，周期长且单调。
编辑本段
应用

历史上，汇编语言曾经是非常流行的程序设计语言之一。随着软件规模的增长，以及随之而来的对软件开发进度和效率的要求，高级语言逐渐取代了汇编语言。但即便如此，高级语言也不可能完全替代汇编语言的作用。就拿Linux内核来讲，虽然绝大部分代码是用C语言编写的，但仍然不可避免地在某些关键地方使用了汇编代码。由于这部分代码与硬件的关系非常密切，即使是C语言也会显得力不从心，而汇编语言则能够很好扬长避短，最大限度地发挥硬件的性能。
首先，汇编语言的大部分语句直接对应着机器指令，执行速度快，效率高，代码体积小，在那些存储器容量有限，但需要快速和实时响应的场合比较有用，比如仪器仪表和工业控制设备中。
其次，在系统程序的核心部分，以及与系统硬件频繁打交道的部分，可以使用汇编语言。比如操作系统的核心程序段、I/O接口电路的初始化程序、外部设备的低层驱动程序，以及频繁调用的子程序、动态连接库、某些高级绘图程序、视频游戏程序等等。
再次，汇编语言可以用于软件的加密和解密、计算机病毒的分析和防治，以及程序的调试和错误分析等各个方面。
最后，通过学习汇编语言，能够加深对计算机原理和操作系统等课程的理解。通过学习和使用汇编语言，能够感知、体会和理解机器的逻辑功能，向上为理解各种软件系统的原理，打下技术理论基础；向下为掌握硬件系统的原理，打下实践应用基础。
编辑本段
特点

1．机器相关性。
这是一种面向机器的低级语言，通常是为特定的计算机或系列计算机专门设计的。因为是机器指令的符号化表示，故不同的机器就有不同的汇编语言。使用汇编语言能面向机器并较好地发挥机器的特性，得到质量较高的程序。
2．高速度和高效率。
汇编语言保持了机器语言的优点，具有直接和简捷的特点，可有效地访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等，且占用内存少，执行速度快，是高效的程序设计语言。
3．编写和调试的复杂性。
由于是直接控制硬件，且简单的任务也需要很多汇编语言语句，因此在进行程序设计时必须面面俱到，需要考虑到一切可能的问题，合理调配和使用各种软、硬件资源。这样，就不可避免地加重了程序员的负担。与此相同，在程序调试时，一旦程序的运行出了问题，就很难发现。
编辑本段
经典教材

汇编语言教材很多，各种处理器都有涉及，粗略统计不下百种。在这么多的教材里，用得较多的可以分类列举如下：
x86处理器
1.《x86汇编语言：从实模式到保护模式》，李忠著，电子工业出版社，2013－1 。

  [1]
基于INTEL x86处理器、NASM编译器和BOCHS虚拟机。汇编语言就是处理器的语言，从这个意义上来说，既然学习汇编语言，就必须直接面向硬件编程，而不是使用莫名其妙的DOS中断和API调用。这是一本有趣的书，它没有把篇幅花在计算一些枯燥的数学题上。相反，它教你如何直接控制硬件，在不借助于BIOS、DOS、Windows、Linux或者任何其他软件支持的情况下来显示字符、读取硬盘数据、控制其他硬件等。
我们知道，32位和64位是主流，实模式和DOS操作系统已经成为历史，Linux和Windows都工作在保护模式下。这本书从实模式讲到32位保护模式，尤其以32位保护模式为重点，阅读本书，对理解现代计算机和现代操作系统的工作原理有非常大的帮助作用。
2.《汇编语言》（第2版），王爽　著，清华大学出版社，2008-4-1
基于INTEL 8086处理器、MASM编译器，以及DOS平台的汇编教材，完全以8086处理器的实模式为主，不涉及常用的32位和64位模式，但因为通俗易懂，读者反映很好。
3.《80X86汇编语言程序设计教程》，杨季文等 编著，清华大学出版社，1999-3-1
基于INTEL x86处理器、MASM和TASM编译器，包含16位实模式和32位保护模式的内容，而且对后者讲述较为详细。
4.《32位汇编语言程序设计》，钱晓捷　编著，机械工业出版社，2011-8-1
基于INTEL x86处理器、MASM编译器，以及WINDOWS平台的汇编教材。
5.《16/32位微机原理汇编语言及接口技术》，钱晓捷，陈涛编著，机械工业出版社，2005-2-1
基于INTEL x86处理器，论述16位微型计算机的基本原理、汇编语言和接口技术，并引出32位微机系统相关技术。
6.《Intel汇编语言程序设计》（第五版），（美）欧文　著，电子工业出版社，2012-7-1
基于INTEL x86处理器、MASM编译器，以及DOS/WINDOWS平台的汇编教材，既有16位实模式的内容，也有32位保护模式的内容。
7.《汇编语言的编程艺术》（第2版），（美）海德　著，清华大学出版社，2011-12-1
基于INTEL x86处理器，使用了作者自制的高级语言汇编器(High Level Assembler，HLA)作为教学工具，以部分地获得高级语言的优势和功能。
8.《x86 PC汇编语言、设计与接口》（第五版），（美）马兹迪，考西著，电子工业出版社，2011-1-1
基于INTEL x86处理器，既讲了16位实模式的内容，也讲了32位保护模式的内容，对64位也有所介绍。
ARM及单片机
1.《汇编语言程序设计--基于ARM体系结构》(第2版)，文全刚　等主编，北京航空航天大学出版社，2010-8-1
基于ARM体系结构的处理器，是学习嵌入式技术的入门教材。
2.《零基础学AVR单片机》，徐益民等编著，机械工业出版社，2011-1-1
单片机概述、avr单片机的开发工具、avr单片机c语言、atmega16单片机基本结构、avr的指令系统与汇编系统等。
3.《基于Multisim10的51单片机仿真实战教程》，聂典，丁伟主编，电子工业出版社，2010-2-1
阐述了NI Multisim 10在单片机仿真中的各项主要功能。
4.《PIC18微控制器：体系结构、编程与接口设计》，（美）贝里著，清华大学出版社，2009-4-1
微控制器广泛应用于汽车、家电、工业控制、医疗设备等众多领域。本书以Microchip公司的PIC18系列微控制器为例，全面讲解如何使用C语言和汇编语言对微控制器进行编程。
5.《CASL汇编语言程序设计》，赵立辉编著，中国电力出版社，2002-10-1
CASL汇编语言是中国计算机软件专业技术资格和水平考试高级程序员级的必考内容。本书是讲述CASL汇编语言程序设计的专著。
编辑本段
编译环境

用汇编语言等非机器语言书写好的符号程序称为源程序，汇编语言编译器的作用是将源程序翻译成目标程序。目标程序是机器语言程序，当它被安置在内存的预定位

  
置上后，就能被计算机的CPU处理和执行。
汇编的调试环境总的来说比较少，也很少有非常好的编译器。编译器的选择依赖于目标处理器的类型和具体的系统平台。一般来说，功能良好的编译器用起来应当非常方便，比如，应当可以自动整理格式、语法高亮显示，集编译、链接和调试为一体，方便实用。
对于广泛使用的个人计算机来说，可以自由选择的汇编语言编译器有MASM、NASM、TASM、FASM、RADASM等，但大都不具备调试功能。如果是为了学习汇编语言，轻松汇编因为拥有一个完善的集成环境，是一款非常适合初学者的汇编编译器。
编辑本段
x86处理器指令集